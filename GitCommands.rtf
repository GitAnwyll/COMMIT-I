{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs80 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GIT CHEAT SHEET
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs36\fsmilli18333 \cf2 STAGE & SNAPSHOT
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 Working with snapshots and the Git staging area
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 git status
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 show modified files in working directory, staged for your next commit
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 git add [file]
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 add a file as it looks now to your next commit (stage)
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 git reset [file]
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 unstage a file while retaining the changes in working directory
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 git diff
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 diff of what is changed but not staged
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 git diff --staged
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 diff of what is staged but not yet committed
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 git commit -m \'93[descriptive message]\'94
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 commit your staged content as a new commit snapshot}